///////////////////////////////////////////////
// Clamp

clamp(number, lower, upper) {

    let lowerClampedValue = Math.max(number, lower);
    let clampedValue = Math.min(lowerClampedValue, upper)
    
    return clampedValue;
}

///////////////////////////////////////////////
// InRange

inRange(number, start, end) {
    if(end === undefined) {
        end = start;
        start = 0;
    };

    if(start > end) { 
        let temp = start; 
        start = end; 
        end = temp; 
    };

    let isInRange;

    if(start <= number && number < end ) {
        isInRange = true;
    } else {
        isInRange = false;
    }

    return isInRange;
}

///////////////////////////////////////////////
// Words

words(str) {

    let words = str.split(' ');

    return words;

}

///////////////////////////////////////////////
// Pad

pad(str, length) {
    if(length <= str.length){
        return str
    };

    let startPaddingLength = Math.floor((length - str.length) / 2);
    let endPaddingLength = length - str.length - startPaddingLength;
    let paddedString = ' '.repeat(startPaddingLength) + str + ' '.repeat(endPaddingLength)

    return paddedString;


}

///////////////////////////////////////////////
// Pad

has(obj, key) {
    return key in obj
    }
}

///////////////////////////////////////////////
// Invert

invert(obj) {
    let invertedObject = {};

    for(let keys in obj) {        
        let originalValue = obj[keys];        
        invertedObject[originalValue] = keys;
    }

    return invertedObject;

}

///////////////////////////////////////////////
// findKey

findKey(obj, predicate) {

    for(let key in obj) {
        var value = obj[key];
        var predicateReturnValue = predicate(value)
        if(predicateReturnValue === true){
            return key
        }
    }

    undefined
    return undefined



}
